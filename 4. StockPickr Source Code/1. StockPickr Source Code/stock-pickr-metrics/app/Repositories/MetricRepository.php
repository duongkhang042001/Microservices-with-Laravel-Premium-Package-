<?php

namespace App\Repositories;

use App\Containers\MetricContainer;
use App\Enums\Category;
use App\Enums\Rules;
use Illuminate\Support\Collection;
use Illuminate\Support\Str;
use StockPickr\Common\Formatters\Formatter;

final class MetricRepository
{
    /**
     * @return Collection<MetricContainer>
     */
    public function getAll(): Collection
    {
        return collect([
            MetricContainer::from([
                'name' => 'Debt to Capital',
                'slug' => Str::slug('Debt to Capital', '_'),
                'slugCamel' => Str::camel('Debt to Capital'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => false,
                'category' => Category::SOLVENCY,
                'scoreRule' => Rules::DOWNWARD,
            ]),
            MetricContainer::from([
                'name' => 'Current Ratio',
                'slug' => Str::slug('Current Ratio', '_'),
                'slugCamel' => Str::camel('Current Ratio'),
                'formatter' => Formatter::NUMBER,
                'shouldHighlightNegativeValue' => false,
                'category' => Category::LIQUIDITY,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'Quick Ratio',
                'slug' => Str::slug('Quick Ratio', '_'),
                'slugCamel' => Str::camel('Quick Ratio'),
                'formatter' => Formatter::NUMBER,
                'shouldHighlightNegativeValue' => false,
                'category' => Category::LIQUIDITY,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'Cash to Debt',
                'slug' => Str::slug('Cash to Debt', '_'),
                'slugCamel' => Str::camel('Cash to Debt'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => false,
                'category' => Category::SOLVENCY,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'Interest to operating profit',
                'slug' => Str::slug('Interest to operating profit', '_'),
                'slugCamel' => Str::camel('Interest to operating profit'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => false,
                'category' => Category::SOLVENCY,
                'scoreRule' => Rules::DOWNWARD,
            ]),
            MetricContainer::from([
                'name' => 'Long term debt to EBITDA',
                'slug' => Str::slug('Long term debt to ebitda', '_'),
                'slugCamel' => Str::camel('Long term debt to ebitda'),
                'formatter' => Formatter::NUMBER,
                'shouldHighlightNegativeValue' => false,
                'category' => Category::SOLVENCY,
                'scoreRule' => Rules::DOWNWARD,
            ]),
            MetricContainer::from([
                'name' => 'Interest coverage ratio',
                'slug' => Str::slug('Interest coverage ratio', '_'),
                'slugCamel' => Str::camel('Interest coverage ratio'),
                'formatter' => Formatter::NUMBER,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::SOLVENCY,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'Debt to assets',
                'slug' => Str::slug('Debt to assets', '_'),
                'slugCamel' => Str::camel('Debt to assets'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => false,
                'category' => Category::SOLVENCY,
                'scoreRule' => Rules::DOWNWARD,
            ]),
            MetricContainer::from([
                'name' => 'Operating Cash Flow to Current Liabilities',
                'slug' => Str::slug('operating_cash_flow_to_current_liabilities', '_'),
                'slugCamel' => Str::camel('operating_cash_flow_to_current_liabilities'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => false,
                'category' => Category::LIQUIDITY,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'Capex as Percent of revenue',
                'slug' => Str::slug('Capex as Percent of revenue', '_'),
                'slugCamel' => Str::camel('Capex as Percent of revenue'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => false,
                'category' => Category::CASH_FLOW,
                'scoreRule' => Rules::DOWNWARD,
            ]),
            MetricContainer::from([
                'name' => 'Capex as Percent of Operating Cash Flow',
                'slug' => Str::slug('Capex as Percent of Operating Cash Flow', '_'),
                'slugCamel' => Str::camel('Capex as Percent of Operating Cash Flow'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => false,
                'category' => Category::CASH_FLOW,
                'scoreRule' => Rules::DOWNWARD,
            ]),
            MetricContainer::from([
                'name' => 'Payout ratio',
                'slug' => Str::slug('Payout ratio', '_'),
                'slugCamel' => Str::camel('Payout ratio'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => false,
                'category' => Category::CASH_FLOW,
                'scoreRule' => Rules::DOWNWARD,
            ]),
            MetricContainer::from([
                'name' => 'ROIC',
                'slug' => Str::slug('roic', '_'),
                'slugCamel' => Str::camel('roic'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::PERFORMANCE,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'ROTA',
                'slug' => Str::slug('rota', '_'),
                'slugCamel' => Str::camel('rota'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::PERFORMANCE,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'ROA',
                'slug' => Str::slug('roa', '_'),
                'slugCamel' => Str::camel('roa'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::PERFORMANCE,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'ROE',
                'slug' => Str::slug('roe', '_'),
                'slugCamel' => Str::camel('roe'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::PERFORMANCE,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'CROIC',
                'slug' => Str::slug('croic', '_'),
                'slugCamel' => Str::camel('croic'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::PERFORMANCE,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'Free Cash flow to revenue',
                'slug' => Str::slug('Free Cash flow to revenue', '_'),
                'slugCamel' => Str::camel('Free Cash flow to revenue'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::CASH_FLOW,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'Net margin',
                'slug' => Str::slug('Net margin', '_'),
                'slugCamel' => Str::camel('Net margin'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::MARGINS,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'Operating margin',
                'slug' => Str::slug('Operating margin', '_'),
                'slugCamel' => Str::camel('Operating margin'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::MARGINS,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'Gross margin',
                'slug' => Str::slug('Gross margin', '_'),
                'slugCamel' => Str::camel('Gross margin'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::MARGINS,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'Operating cash flow margin',
                'slug' => Str::slug('Operating cash flow margin', '_'),
                'slugCamel' => Str::camel('Operating cash flow margin'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::MARGINS,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'S&GA to gross profit',
                'slug' => Str::slug('sga to gross profit', '_'),
                'slugCamel' => Str::camel('sga to gross profit'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => false,
                'category' => Category::MARGINS,
                'scoreRule' => Rules::DOWNWARD,
            ]),
            MetricContainer::from([
                'name' => 'EPS growth',
                'slug' => Str::slug('eps growth', '_'),
                'slugCamel' => Str::camel('eps growth'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::GROWTH,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'Net income growth',
                'slug' => Str::slug('Net income growth', '_'),
                'slugCamel' => Str::camel('Net income growth'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::GROWTH,
                'scoreRule' => Rules::UPWARD,
            ]),
            MetricContainer::from([
                'name' => 'Revenue growth',
                'slug' => Str::slug('Total Revenue growth', '_'),
                'slugCamel' => Str::camel('Total Revenue growth'),
                'formatter' => Formatter::PERCENT,
                'shouldHighlightNegativeValue' => true,
                'category' => Category::GROWTH,
                'scoreRule' => Rules::UPWARD,
            ]),
        ]);
    }
}

