server {
    listen 80;
    server_name stock-pickr.io;
    index index.html;
    root /usr/share/nginx/html;
    # return 301 https://$host$request_uri;

    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;

    gzip on;
    gzip_types text/plain application/json;

    location / {
        try_files $uri $uri/ /index.html;
        gzip_static on;
    }

    # Rule for legitimate ACME Challenge requests (like /.well-known/acme-challenge/xxxxxxxxx)
    # We use ^~ here, so that we don't check other regexes (for speed-up). We actually MUST cancel
    # other regex checks, because in our other config files have regex rule that denies access to files with dotted names.
    # location ^~ /.well-known/acme-challenge/ {

        # Set correct content type. According to this:
        # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
        # Current specification requires "text/plain" or no content header at all.
        # It seems that "text/plain" is a safe option.
        # default_type "text/plain";

        # This directory must be the same as in /etc/letsencrypt/cli.ini
        # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
        # there to "webroot".
        # Do NOT use alias, use root! Target directory is located here:
        # /var/www/common/letsencrypt/.well-known/acme-challenge/
        # root         /var/www/letsencrypt;
    # }

    # Hide /acme-challenge subdirectory and return 404 on all requests.
    # It is somewhat more secure than letting Nginx return 403.
    # Ending slash is important!
    # location = /.well-known/acme-challenge/ {
    #     return 404;
    # }
}

# server {
#     server_name stock-pickr.io;
#     listen 443 ssl;
#     listen [::]:443 ssl;
#     root /usr/share/nginx/html;
#     index index.html;

#     ssl_certificate /etc/letsencrypt/live/stock-pickr.io/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/stock-pickr.io/privkey.pem;
# }
